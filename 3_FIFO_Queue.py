# Напишем код для работы с бинарным деревом поиска.

# создаем класс Node корневого узла
class Node():
    def __init__(self, key):                        # Конструктор
        self.left = None                            # Создаем левый дочерний узел
        self.right = None                           # Создаем правый дочерний узел
        self.val = key                              # Переменная для хранения значения key

# Функция для добавления нового узла
# в бинарное дерево поиска
def insert(root, key):                              # root - корневой узел key - значение для добавления
    if root is None:                                # если корень пустой - создаем новый корень
        return Node(key)                            # возвращаем новый корень
    else:
        if root.val < key:                          # если значение корня больше значения узла
            root.right = insert(root.right, key)    # создаем правый дочерний узел
        else:
            root.left = insert(root.left, key)      # создаем левый дочерний узел
    return root                                     # возвращаем текущий корень дерева

root = Node(50)                                     # Используем созданный только что класс. Для этого создадим переменную Root и корень дерева с помощью класса Node. Для примера передадим сюда значение 50:


root = insert(root, 30)                         # сохраняем в root то, что будет возвращаться после использования функции insert, передавая сюда новое значение, например, 30:
root = insert(root, 20)
root = insert(root, 40)
root = insert(root, 70)
root = insert(root, 60)
root = insert(root, 80)

print(root.val)                                     # выводим значение корня дерева
print("Левое поддерево:")
print(root.left.val)                                # выводим значение левого поддерева
print(root.left.left.val)                           # выводим значение левого левого поддерева
print("Левое Левое поддерево:")
print(root.left.right.val)                          # выводим значение левого правого поддерева
print("Правое поддерево:")
print(root.right.val)                               # выводим значение правого поддерева
print(root.right.left.val)                          # выводим значение правого левого поддерева
print(root.right.right.val)                         # выводим значение правого правого поддерева



