# FIFO - First In First Out
# Создадим программу с использованием очереди.
# Для этого создадим класс Queue, где инициализируем пустой список,
# а также пропишем метод инициализации, конструктор, который будет создавать изначальный, пустой список:

# Создадим класс Queue
class Queue:
   def __init__(self):                      # конструктор
       self.items = []                      # пустой список self.items - это циклический список, который будет хранить элементы очереди

   def is_empty(self):                      # проверка на пустоту
       return self.items == []              # если пустой, то возвращаем True, иначе False

   def enqueue(self, item):                 # добавление элемента в очередь
       self.items.insert(0, item)    # в начало списка циклически добавляем элемент

   def dequeue(self):                       # удаление элемента из очереди
       return self.items.pop()              # в конце списка [5, 4, 3, 2, 1] циклически удаляем элемент 1 например

   def size(self):                          # количество элементов в очереди
       return len(self.items)               # [5, 4, 3, 2, 1] циклически возвращаем количество элементов в очереди

# создадим очередь
queue = Queue()

print(queue.is_empty())                     # выводим на экран True

queue.enqueue("действие 1")                 # добавление элемента в очередь
queue.enqueue("действие 2")
queue.enqueue("действие 3")
queue.enqueue("действие 4")

# ["действие 4", "действие 3", "действие 2", "действие 1"]

print(queue.is_empty())                     # выводим на экран False
print(queue.size())                         # выводим на экран находится сейчас 4 элемента в очереди
print(queue.dequeue())                      # выводим на экран "действие 1" циклически удаляем элемент 1
print(queue.size())                         # выводим на экран находится сейчас 3 элемента в очереди
